<?xml version="1.0" encoding="UTF-8"?>
<p:declare-step 
    xmlns:c="http://www.w3.org/ns/xproc-step"
    xmlns:p="http://www.w3.org/ns/xproc"
    xml:base="../"
    name="scissor-lift"
    version="1.0">
  
  <p:documentation>Takes a source XML and a scissor-lift mapping, compiles the mapping and applies it to the source document.</p:documentation>
  
  <p:option name="representation" select="'trix'">
    <p:documentation>Defines the output graph representation and accepts values of: (ntriples | rdfxml | trix). Default is trix.</p:documentation>
  </p:option>
  
  <p:input port="source" primary="true"/>
  <p:input port="mapping"/>
  <p:output port="include">
    <p:pipe port="result" step="include"/>
  </p:output>
  <p:output port="expand">
    <p:pipe port="result" step="expand"/>
  </p:output>
  <p:output port="compile">
    <p:pipe port="result" step="compile"/>
  </p:output>
  <p:output port="result" primary="true"/>
  
  
  <p:serialization port="compile" encoding="UTF-8" indent="true" 
      media-type="application/xml" method="xml"/>
  <p:serialization port="result" encoding="UTF-8" indent="true" 
      media-type="application/xml" method="xml"/>
  
  <p:xslt name="translate">
    <p:documentation>Translate the LiftML mapping to the augmented ISO Schematron.</p:documentation>
    <p:input port="source">
      <p:pipe port="mapping" step="scissor-lift"/>
    </p:input>
    <p:input port="stylesheet">
      <p:document href="xslt/sl-lift-to-iso-sch.xsl"/>
    </p:input>
    <p:input port="parameters">
      <p:empty/>
    </p:input>
  </p:xslt>
  
  <p:xslt name="include">
    <p:documentation>First, preprocess your Schematron schema with iso_dsdl_include.xsl.</p:documentation>
    <p:input port="stylesheet">
      <p:document href="xslt/scissor-lift-include.xsl"/>
    </p:input>
    <p:input port="parameters">
      <p:empty/>
    </p:input>
  </p:xslt>
  
  <p:xslt name="expand">
    <p:documentation>Second, preprocess the output from stage 1 with iso_abstract_expand.xsl.</p:documentation>
    <p:input port="stylesheet">
      <p:document href="xslt/iso-schematron-xslt2/iso_abstract_expand.xsl"/>
    </p:input>
    <p:input port="parameters">
      <p:empty/>
    </p:input>
  </p:xslt>
  
  <p:xslt name="compile">
    <p:documentation>Third, compile the Schematron schema into an XSLT script.</p:documentation>
    <p:input port="stylesheet">
      <p:document href="xslt/scissor-lift.xsl"/>
    </p:input>
    <p:input port="parameters">
      <p:empty/>
    </p:input>
    <p:with-param name="terminate" select="'assert'"/>
    <p:with-param name="generate-paths" select="'false'"/>
    <p:with-param name="generate-fired-rule" select="'false'"/>
  </p:xslt>
  
  <p:xslt name="graph">
    <p:documentation>Fourth, run the transform generated by stage 3 (compile) against the document to be transformed.</p:documentation>
    <p:input port="source">
      <p:pipe port="source" step="scissor-lift"/>
    </p:input>
    <p:input port="stylesheet">
      <p:pipe port="result" step="compile"/>
    </p:input>
    <p:input port="parameters">
      <p:empty/>
    </p:input>
  </p:xslt>
  
  <p:choose>
    <p:documentation>Select an output representation.</p:documentation>
    <p:when test="$representation eq 'ntriples'">
      <p:xslt name="n-triples">
        <p:documentation>Transform to N-Triples.</p:documentation>
        <p:input port="stylesheet">
          <p:document href="xslt/ntriples/sl-trix-to-ntriples.xsl"/>
        </p:input>
        <p:input port="parameters">
          <p:empty/>
        </p:input>
      </p:xslt>
      
      <p:store encoding="UTF-8" indent="true" media-type="text/plain" method="text">
        <p:with-option name="href" select="concat('graphs/', substring-before(tokenize(base-uri(), '/')[last()], '.xml'), '.nt')"/>
        <p:documentation>XProc 1.0 cannot handle text output from a step so pushing the N-Triples to the file-system from here.</p:documentation>
      </p:store>
    </p:when>
    <p:when test="$representation eq 'rdfxml'">
      <p:xslt name="rdf-xml">
        <p:documentation>Transform to RDF XML.</p:documentation>
        <p:input port="stylesheet">
          <p:document href="xslt/rdf-xml/trix-to-rdf-xml.xsl"/>
        </p:input>
        <p:input port="parameters">
          <p:empty/>
        </p:input>
      </p:xslt>
      
      <p:store encoding="UTF-8" indent="true" media-type="application/rdf+xml" method="xml">
        <p:with-option name="href" select="concat('graphs/', substring-before(tokenize(base-uri(), '/')[last()], '.xml'), '.rdf')"/>
        <p:documentation>Pushing the RDF/XML to the file-system from here.</p:documentation>
      </p:store>
    </p:when>
  </p:choose>
  
  <p:identity>
    <p:input port="source">
      <p:pipe port="result" step="graph"/>
    </p:input>
  </p:identity>
</p:declare-step>